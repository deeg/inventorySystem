#!/usr/bin/env node

var cmd = require('commander');
var async = require('async');

var config, constants, env_file, pkg_file, host, script, remote;

init();

function safe_json(file) {
  var result;
  try {
    result = require(file);
    return result;
  }
  catch(e) {
    console.warn("Unable to require '" + file + "'");
    return;
  }
}

function section(name) {
  console.log('\n=== ' + name + ' ===');
}

function command() {
  cmd
  .version('0.0.2')
  .usage('provision <environment> <host> [name]');

  cmd.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    $ scripts/provision config/prod.db.env.json 1.2.3.4');
    console.log('    $ scripts/provision config/prod.web.env.json 1.2.3.5 web1');
    console.log('    $ scripts/provision config/prod.web.env.json 1.2.3.6 web2');
    console.log('    $ scripts/provision config/prod.media.env.json 1.2.3.7 media1');
    console.log('');
  });

  cmd.parse(process.argv);

  if (cmd.args.length < 2) {
    console.warn("Environment and host are required.");
    process.exit();
  }
}

function init() {
  command();

  env_file = process.cwd() + '/' + cmd.args[0];
  pkg_file = process.cwd() + '/package.json';
  host = cmd.args[1];
  remote = cmd.args[2];

  console.log('\nProvisioning ' + host );
  console.log('Using ' + env_file + ' and ' + pkg_file);

  config = safe_json(env_file);
  if (!config) {
    console.warn("Environment file required");
    process.exit();
  }

  var pkg = safe_json(pkg_file);
  if (!pkg) {
    console.warn("Package file required");
    process.exit();
  }

  constants = pkg.constants;
  constants.name = pkg.name;

  var options = {
    dir: process.cwd(),
    host: host,
    config: config,
    constants: constants,
    config_file: env_file,
    remote: remote
  };

  var script_file = './lib/' + config.deployment.type + '/provision';
  console.log("Script:", script_file);
  delete config.deployment.type;
  script = require(script_file);

  script.provision(options, complete);

  function complete(err) {
    console.log('\ncomplete.');
    process.exit();
  }
}
